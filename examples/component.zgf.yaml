params:
  componentName:
    placeholder: "Input component name"
    type: string
    default: "MyComponent"
    validator: "UpperCamelCase"
  componentStyleExtension:
    placeholder: "Input component style extension"
    type: enum
    values:
      - css
      - scss
      - module.scss
      - module.css
    default: "css"
  addPublicApi:
    placeholder: "Add publicApi?"
    type: boolean
    default: true

files:
  - name: "{{=componentName}}.tsx"
    content: |
      import "./{{=componentName}}.{{=componentStyleExtension}}";
      import React from "react";

      interface {{=componentName}}Props {
        children: React.ReactNode;
      }

      const {{=componentName}}: React.FC<{{=componentName}}Props> = ({ children }) => {
        return <div>{children}</div>;
      };

      export default {{=componentName}};
  - name: "{{=componentName}}.{{=componentStyleExtension}}"
    content: ""
  - name: "index.ts"
    condition: "{{=addPublicApi}}"
    content: |
      export { default as {{=componentName}} } from "./{{=componentName}}";

hooks:
  preGenerate:
    - run: "echo Start scaffolding in {{=outputDir}}"
  afterEach:
    - run: "echo Created {{=fileName}} at {{=filePath}}"
    - run: "npx prettier --write {{=filePath}}"
      condition: "{{=addPublicApi}}"
      timeout: 20000
      env:
        COMPONENT: "{{=componentName}}"
        FILE: "{{=fileName}}"
      onError:
        - run: "echo 'Prettier failed for {{=fileName}}: {{=errorMessage}}' >&2"
        - run: "node ./scripts/report-hook-failure.js --file='{{=filePath}}' --code='{{=exitCode}}'"
          cwd: "{{=templateDir}}"
      continueOnError: true
  postGenerate:
    - run: "npx eslint --fix ."
      cwd: "{{=outputDir}}"
      timeout: 30000
      env:
        GEN_OUT_DIR: "{{=outputDir}}"
      onError: "echo 'ESLint failed with code {{=exitCode}}' >&2"
    - run: "node ./scripts/index-files.js --files='{{=createdFiles}}'"
      cwd: "{{=templateDir}}"
      continueOnError: true